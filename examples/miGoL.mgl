// 
// Name: Game of Life in Migol.
// By:   FireFly (firefly.nu).
// Date: 2009-04-30.
// 
// ---[ Memory: ]---
//  [2]     : Char: dead cell.
//  [3]     : Char: alive cell.
//  [4]     : Current cycle (0/1).
//  [5]     : X loop pointer.
//  [6]     : Y loop pointer.
//  [7]     : Width of array.
//  [8]     : Height of array.
//  [9]     : Curr cell neighbours.
// 
//  [10]    : 
//    :     : Temp vars.
//  [19]    : 
// 
//  [20]    : Label: Generation loop beginning.
//  [21]    : Label: After main loop.
// 
//  [25]    : 
//    :     : Temp vars (reading strings).
//  [95]    : 
// 
//  [100]   : 
//    :     : Data (cells).
//  [ ? ]   : 
// 
// ---[ Cell memory: ]---
//  00000000 00000000 00000000 000000ba
// 
//  a : New/curr value in cell*.
//  b : New/curr value in cell*.
// 
//  * New/curr status is defined by [4]; if [4] is 0, a is curr value.
// 
// 
// ---[ Examples: ]---
// LWSS:       BD, ED, FE, FF, FG, EG, DG, CG, BF
// Glider:     BA, CB, CC, BC, AC
// Gosper Gun: CG, DG, CH, DH, OE, PE, NF, RF, MG, SG, MH, QH,
//             SH, TH, MI, SI, NJ, RJ, OK, PK, WE, XE, WF, XF,
//             WG, XG, YD, YH, [C, [D, [H, [I, eE, fE, eF, fF

	// Print welcoming.
'W>,'e>,'l>,'c>,'o>,'m>,'e>,' >,'t>,'o>,' >,'G>,'a>,'m>,'e>,' >,'o>
'f>,' >,'L>,'i>,'f>,'e>,' >,'i>,'n>,' >,'M>,'i>,'g>,'o>,'l>,'!>,10>

' >,' >,'B>,'y>,' >,'F>,'i>,'r>,'e>,'F>,'l>,'y>,' >,'(>,'f>,'i>,'r>
'e>,'f>,'l>,'y>,'.>,'n>,'u>,')>,'.>,10>
10>

	// Print help.
' >,'->,'->,'->,'[>,' >,'H>,'e>,'l>,'p>,':>,' >,']>,'->,'->,'->,10>
' >,' >,'S>,'u>,'p>,'p>,'l>,'y>,' >,'i>,'n>,'f>,'o>,':>,10>
' >,' >,'*>,' >,'E>,'n>,'t>,'e>,'r>,' >,'t>,'o>,' >,'l>,'e>,'t>,' >
'a>,' >,'g>,'e>,'n>,'e>,'r>,'a>,'t>,'o>,'n>,' >,'p>,'a>,'s>,'s>,'.>,10>
' >,' >,'*>,' >,'C>,'o>,'o>,'r>,'d>,'s>,' >,'f>,'o>,'r>,' >,'a>,' >
'c>,'e>,'l>,'l>,' >,'t>,'o>,' >,'s>,'w>,'i>,'t>,'c>,'h>,' >,'i>,'t>,
' >,'(>,'X>,'Y>,')>,'.>,10>
	' >,' >,' >,' >,'(>,'I>,'n>,'p>,'u>,'t>,' >,'n>,'e>,'w>,' >,'c>,'o>,'o>,'r>,'d>,' >,'o>,'r>,' >,'e>,'n>,'t>,'e>,'r>,' >,'f>,'o>,'r>,' >,'n>,'e>,'x>,'t>,' >,'t>,'i>,'c>,'k>,' >,'t>,'o>,' >,'c>,'o>,'n>,'t>,'i>,'n>,'u>,'e>,' >,'a>,'f>,'t>,'e>,'r>,'w>,'a>,'r>,'d>,'s>,'.>,')>,10>
10>

	// Settings:
' >,'->,'->,'->,'[>,' >,'S>,'e>,'t>,'t>,'i>,'n>,'g>,'s>,':>,' >,']>,'->,'->,'->,10>

'W>,'i>,'d>,'t>,'h>,':>,' >		// Width.
	10<25, [10]<[@], 11<[[10]]<$-10, 10<$+1, #<$-3?>[11] // Read newline-terminated string to [25-?].
	
	10<$-2
	
	11<0, 15<0
		12<[10]<$-[11]	// Points to curr char.
		13<[[12]]<$-48
		#<$+5?=[11]
		14<[11]
			13<$*10		// 
			14<$-1		// Loop that multiplies with 10.
		#<$-2?>[14]		// 
		15<$+[13]
		11<$+1
		12<$-25
	#<$-10?>[12]
	
	7<[15]	// Set the width.
	
'H>,'e>,'i>,'g>,'h>,'t>,':>,' >		// Height.
	10<25, [10]<[@], 11<[[10]]<$-10, 10<$+1, #<$-3?>[11] // Read newline-terminated string to [25-?].
	
		// Same as with width (but for height instead).
	10<$-2, 11<0, 15<0, 12<[10]<$-[11], 13<[[12]]<$-48, #<$+5?=[11], 14<[11], 13<$*10, 14<$-1, #<$-2?>[14], 15<$+[13], 11<$+1, 12<$-25, #<$-10?>[12]
	8<[15]	// Set the height.

	// Character setup.
' >,' >,'C>,'h>,'a>,'r>,'s>,':>,10>
'D>,'e>,'a>,'d>,' >,'c>,'e>,'l>,'l>,' >,'c>,'h>,'a>,'r>,':>,' >
2<[@], 0<[@]//<[@]

'A>,'l>,'i>,'v>,'e>,' >,'c>,'e>,'l>,'l>,' >,'c>,'h>,'a>,'r>,':>,' >
3<[@], 0<[@]//<[@]

	// Print letters for the x coords (1+9 instr).
10>
' >, ' >, 10<1,11<[10]<$+64,' >,[11]>,11<[7]<$-[10],10<$+1,#<$-5?>[11],10>

	// Print fancy line (7 instr).
' >,'+>,10<[7]<$*2, '->, 10<$-1, #<$-2?>[10], 10>

	// ---[ Begin real code here! ]---
20<[#]<$+3
	5<0, 6<0	// Setup coordinates.
	// Playfield main loop begins here.
		#<$+4?>[5], 10<[6]<$+65, [10]>, '|>	// Print letters for y coords.
		
		10<[6]<$*[7]<$+[5]<$+100	// Store curr cell in addr. 10.
		
		12<[4]<$+1	// Curr amount to shift value in cell mem with.
		13<[4]<$^1<$+1	// Curr other amount to shift cells with.
		
			// Count neighbours.
		9<0
		11<[10]<$-[7]<$-1, 11<[[11]]<$&[12]<$>>[4], 9<$+[11]
		11<[10]<$-[7],     11<[[11]]<$&[12]<$>>[4], 9<$+[11]
		11<[10]<$-[7]<$+1, 11<[[11]]<$&[12]<$>>[4], 9<$+[11]
		11<[10]<$-1,       11<[[11]]<$&[12]<$>>[4], 9<$+[11]
		11<[10]<$+1,       11<[[11]]<$&[12]<$>>[4], 9<$+[11]
		11<[10]<$+[7]<$-1, 11<[[11]]<$&[12]<$>>[4], 9<$+[11]
		11<[10]<$+[7],     11<[[11]]<$&[12]<$>>[4], 9<$+[11]
		11<[10]<$+[7]<$+1, 11<[[11]]<$&[12]<$>>[4], 9<$+[11]
		
		11<[9]<$-2, 14<[11]<$-1
		
		15<[[10]]<$&[12]<$>>[4]
		
			// Print [2] if dead, [3] if alive.
		' >, #<$+3?=[15], [3]>, #<$+2, [2]>
		
		15<[13]<$!
		[10]<$&[15]	// Set cell to dead.
		
		#<$+3?=[11]	// 
		#<$+2?=[14]	// if anount of neighbours are 2 or 3;
		#<$+2		// 
		[10]<$|[13]	// Set status to alive.
		
		14<[[10]]<$&[12]	// 
		#<$+3?>[14]			// However, if dead && neighbours are 2;
		#<$+2?<>[11]		// 
		[10]<$&[15]			// Set to dead anyway.
		
		
			// Handle looping of playfield.
		5<$+1			// Increase x coord.
		11<[5]<$-[7]	// [11] is 0 if [5] is at max width.
		6<$+1?=[11]		// Increase Y pos if x is at max width.
		10<[6]<$-[8]	// [10] is 0 if [6] is at max height.
		5<0?=[11]		// Reset x coord if x is at max width.
		
		10>?=[5]	// Print newline after every row.
	#<[20]?<[10]	// Repeat if not at max height.
	
	10>
	21<[#]
	
	// ---[ End of real GoL code here! ]---
	
	'>>,' >	// Prefix input phrase.
	10<25, [10]<[@], 11<[[10]]<$-10, 10<$+1, #<$-3?>[11] // Read newline-terminated string to [25-?].
	
		// Handle setting the coords.
	10<[25]<$-65, 11<[10]<$-[7]	// 
	#<$+10?<[10], #<$+9?>[11]	// If supplied input represents
	11<[26]<$-65, 12<[11]<$-[8]	// an x and y coordinate (by the
	#<$+6?<[11], #<$+5?>[12]	// letter representation), then:
		12<[11]<$*[7]<$+[10]<$+100	// Set [10] to the selected cell.
	11<[4]<$^1<$+1
	[12]<$^[11]
	#<[21]
	
	4<$^1	// Switch cycle boolean.
#<[20]<$-21	// Goto next generation.